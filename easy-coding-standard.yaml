imports:
    # Import paths when running via jakzal/phpqa docker image
    - { resource: '/root/EasyCodingStandard/config/symfony*', ignore_errors: true }
    # Alternatively, import when this package is being used directly (eg. during development)
    - { resource: 'vendor/symplify/easy-coding-standard/config/symfony*', ignore_errors: true }

parameters:
    exclude_checkers:
        # Skipped symfony.neon rules
        - PhpCsFixer\Fixer\Phpdoc\PhpdocAlignFixer # harder looking diffs
        - PhpCsFixer\Fixer\Phpdoc\PhpdocSummaryFixer # I don't want summary being forced upon me. Sometime there is no need for it, I just want to explain what are the options for.
        - PhpCsFixer\Fixer\FunctionNotation\ReturnTypeDeclarationFixer # -> TypeHintDeclarationSniff.MissingReturnTypeHint
        - PhpCsFixer\Fixer\Phpdoc\PhpdocToCommentFixer # screws up @psalm-suppress https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/3611
        - PhpCsFixer\Fixer\Phpdoc\PhpdocNoEmptyReturnFixer # -> TypeHintDeclarationSniff.UselessReturnAnnotation
          # See https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/3391 for reason why are these not deprecated
        - PhpCsFixer\Fixer\Phpdoc\PhpdocNoAccessFixer # -> GeneralPhpdocAnnotationRemoveFixer
        - PhpCsFixer\Fixer\Phpdoc\PhpdocNoPackageFixer # -> GeneralPhpdocAnnotationRemoveFixer
        # Skipped symfony-risky.neon rules
        - PhpCsFixer\Fixer\Alias\EregToPregFixer # -> Don't need to worry about this in PHP 7
        - PhpCsFixer\Fixer\Alias\NoAliasFunctionsFixer # -> ForbiddenFunctionsSniff
    skip:
        SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff.MissingTraversableParameterTypeHintSpecification:
            - '*src/Form/Type/*Type.php' # no need to define mixed[] for $options all the time
        PhpCsFixer\Fixer\Operator\BinaryOperatorSpacesFixer: # in tests array alignment might be very useful in dataproviders
            - '*tests/*.php'

services:
    # code logic improvements / easy simplifications
    PhpCsFixer\Fixer\LanguageConstruct\CombineConsecutiveIssetsFixer:
    PhpCsFixer\Fixer\ControlStructure\NoSuperfluousElseifFixer:
    PhpCsFixer\Fixer\FunctionNotation\NoUnreachableDefaultArgumentValueFixer:
    PhpCsFixer\Fixer\Operator\TernaryToNullCoalescingFixer:
    SlevomatCodingStandard\Sniffs\ControlStructures\RequireShortTernaryOperatorSniff:
    SlevomatCodingStandard\Sniffs\ControlStructures\EarlyExitSniff:
    PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\ForLoopShouldBeWhileLoopSniff:
    PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\ForLoopWithTestFunctionCallSniff:
    PHP_CodeSniffer\Standards\Generic\Sniffs\Strings\UnnecessaryStringConcatSniff:
        allowMultiline: true
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Classes\SelfMemberReferenceSniff:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Operators\IncrementDecrementUsageSniff:
    Symplify\CodingStandard\Fixer\Php\ClassStringToClassConstantFixer:
    SlevomatCodingStandard\Sniffs\Exceptions\ReferenceThrowableOnlySniff:
    PhpCsFixer\Fixer\ControlStructure\YodaStyleFixer:
        equal: false
        identical: false
        less_and_greater: false
    Symplify\CodingStandard\Sniffs\CleanCode\CognitiveComplexitySniff:

    # dead code detection
    PhpCsFixer\Fixer\ClassNotation\NoNullPropertyInitializationFixer:
    SlevomatCodingStandard\Sniffs\Namespaces\UnusedUsesSniff:
        searchAnnotations: true
    SlevomatCodingStandard\Sniffs\Classes\UnusedPrivateElementsSniff:
    SlevomatCodingStandard\Sniffs\Exceptions\DeadCatchSniff:
    SlevomatCodingStandard\Sniffs\Namespaces\UseFromSameNamespaceSniff:
    Symplify\CodingStandard\Sniffs\Debug\DebugFunctionCallSniff:

    # inconsistency fixes
    PhpCsFixer\Fixer\Import\OrderedImportsFixer:
    PhpCsFixer\Fixer\Strict\DeclareStrictTypesFixer:
    PhpCsFixer\Fixer\Strict\StrictComparisonFixer:
    SlevomatCodingStandard\Sniffs\TypeHints\LongTypeHintsSniff:
    SlevomatCodingStandard\Sniffs\Namespaces\UseDoesNotStartWithBackslashSniff:
    SlevomatCodingStandard\Sniffs\Namespaces\ReferenceUsedNamesOnlySniff:
        searchAnnotations: true
        allowFullyQualifiedNameForCollidingClasses: true # class Foo extends \Vendor\Foo
        allowFullyQualifiedGlobalClasses: true
        allowFullyQualifiedGlobalFunctions: true
        allowFullyQualifiedGlobalConstants: true
    PHP_CodeSniffer\Standards\Generic\Sniffs\PHP\ForbiddenFunctionsSniff:
        forbiddenFunctions:
            chop: rtrim
            close: closedir
            delete: unset
            doubleval: floatval
            fputs: fwrite
            imap_create: createmailbox
            imap_fetchtext: body
            imap_header: headerinfo
            imap_listmailbox: list
            imap_listsubscribed: lsub
            imap_rename: renamemailbox
            imap_scan: listscan
            imap_scanmailbox: listscan
            mt_rand: random_int
            ini_alter: set
            is_double: float
            is_integer: int
            is_long: int
            is_real: float
            is_writeable: writable
            join: implode
            key_exists: exists
            magic_quotes_runtime: set_magic_quotes_runtime
            pos: current
            print: echo
            rand: random_int
            show_source: file
            sizeof: count
            strchr: strstr
    PhpCsFixer\Fixer\ArrayNotation\ArraySyntaxFixer:
        syntax: short
    PhpCsFixer\Fixer\ListNotation\ListSyntaxFixer:
        syntax: short
    Symplify\CodingStandard\Fixer\Naming\MagicMethodsNamingFixer:
    Symplify\CodingStandard\Fixer\Property\ArrayPropertyDefaultValueFixer:
    Symplify\CodingStandard\Sniffs\Naming\AbstractClassNameSniff:
    Symplify\CodingStandard\Sniffs\Naming\InterfaceNameSniff:
    Symplify\CodingStandard\Sniffs\Naming\TraitNameSniff:

    # whitespaces
    PhpCsFixer\Fixer\Whitespace\CompactNullableTypehintFixer:
    PHP_CodeSniffer\Standards\PEAR\Sniffs\ControlStructures\MultiLineConditionSniff:
    PHP_CodeSniffer\Standards\PEAR\Sniffs\Formatting\MultiLineAssignmentSniff:
    SlevomatCodingStandard\Sniffs\Namespaces\MultipleUsesPerLineSniff:
    Symplify\CodingStandard\Fixer\Strict\BlankLineAfterStrictTypesFixer:
    Symplify\CodingStandard\Fixer\LineLength\LineLengthFixer:
    PhpCsFixer\Fixer\Semicolon\MultilineWhitespaceBeforeSemicolonsFixer:
        strategy: new_line_for_chained_calls
    PhpCsFixer\Fixer\CastNotation\CastSpacesFixer:
        space: none
    PhpCsFixer\Fixer\ClassNotation\ClassAttributesSeparationFixer:
        elements: [method]
    PhpCsFixer\Fixer\Whitespace\NoExtraBlankLinesFixer:
        tokens:
            - break
            - case
            - continue
            - curly_brace_block
            - default
            - extra
            - parenthesis_brace_block
            - return
            - square_brace_block
            - switch
            - throw
            - use
            - use_trait

    # comments/annotations/phpdoc
    PhpCsFixer\Fixer\Comment\SingleLineCommentStyleFixer:
    PhpCsFixer\Fixer\Phpdoc\PhpdocAddMissingParamAnnotationFixer:
    PhpCsFixer\Fixer\Phpdoc\PhpdocOrderFixer:
    PhpCsFixer\Fixer\Phpdoc\AlignMultilineCommentFixer:
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting\EmptyCatchCommentSniff:
    Symplify\CodingStandard\Fixer\Commenting\BlockPropertyCommentFixer:
    PhpCsFixer\Fixer\Phpdoc\GeneralPhpdocAnnotationRemoveFixer:
        annotations: [access, package, created, version, copyright, license, throws]
    Symplify\CodingStandard\Sniffs\Debug\CommentedOutCodeSniff:
    Symplify\CodingStandard\Fixer\Commenting\RemoveSuperfluousDocBlockWhitespaceFixer:
    Symplify\CodingStandard\Fixer\ControlStructure\RequireFollowedByAbsolutePathFixer:
    SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff:
        enableEachParameterAndReturnInspection: true
        allAnnotationsAreUseful: true
    SlevomatCodingStandard\Sniffs\Commenting\ForbiddenCommentsSniff:
        forbiddenCommentPatterns:
            - '~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i'
            - '~^Created by \S+\.\z~i'
            - '~^\S+ [gs]etter\.\z~i'
            - '~^User: .+$~'
            - '~^Date: .+$~'
            - '~^Time: .+$~'
            - '~^Class \w+$~'

    # @DoctrineAnnotation
    PhpCsFixer\Fixer\DoctrineAnnotation\DoctrineAnnotationArrayAssignmentFixer:
    PhpCsFixer\Fixer\DoctrineAnnotation\DoctrineAnnotationBracesFixer:
    PhpCsFixer\Fixer\DoctrineAnnotation\DoctrineAnnotationIndentationFixer:
    PhpCsFixer\Fixer\DoctrineAnnotation\DoctrineAnnotationSpacesFixer:
