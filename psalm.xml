<?xml version="1.0"?>
<psalm
    xsi:schemaLocation="https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd"
    xmlns="https://getpsalm.org/schema/config"
    totallyTyped="false"
    allowPhpStormGenerics="true"
    allowStringToStandInForClass="false"
    usePhpDocMethodsWithoutMagicCall="true"
>
    <projectFiles>
        <directory name="src" />
    </projectFiles>

    <issueHandlers>
        <!-- Symfony Form component converts empty submission to null values, this causes inconsistency between properties/getters/setters. We would basically have to make everything nullable. -->
        <LessSpecificReturnType> <!-- Forces nullable getters on us -->
            <errorLevel type="suppress">
                <directory name="src/Entity" />
                <directory name="src/DataObject" />
            </errorLevel>
        </LessSpecificReturnType>
        <PossiblyNullPropertyAssignmentValue> <!-- Forbids us to have setter accepting null if property is not marked nullable -->
            <errorLevel type="suppress">
                <directory name="src/Entity" />
            </errorLevel>
        </PossiblyNullPropertyAssignmentValue>

        <!-- Other Symfony Form component issues -->
        <MissingPropertyType>
            <errorLevel type="suppress">
                <directory name="src/Form/Type" /> <!-- Triggered by $view->vars['stuff'] = 'stuff'; -->
            </errorLevel>
        </MissingPropertyType>

        <!-- Doctrine issues -->
        <LessSpecificReturnStatement> <!-- Forbids to define that $this->prop->filter() returns SomeEntity[] https://github.com/vimeo/psalm/issues/585 -->
            <errorLevel type="suppress">
                <directory name="src/Entity" />
                <directory name="src/Repository" />
                <directory name="src/Process" />
            </errorLevel>
        </LessSpecificReturnStatement>
        <RawObjectIteration> <!-- Collection|Selectable -->
            <errorLevel type="suppress">
                <directory name="src/Entity" />
            </errorLevel>
        </RawObjectIteration>
        <PossiblyUndefinedMethod> <!-- Collection|Selectable -->
            <errorLevel type="suppress">
                <directory name="src/Entity" />
            </errorLevel>
        </PossiblyUndefinedMethod>
        <MismatchingDocblockReturnType> <!-- Collection|Selectable https://github.com/vimeo/psalm/issues/593 -->
            <errorLevel type="suppress">
                <directory name="src/Entity" />
            </errorLevel>
        </MismatchingDocblockReturnType>

        <!-- I know these break LSP, but it's handy to narrow down via docblock what exactly implementation expects/returns, especially when parent specifies just mixed array -->
        <MoreSpecificImplementedParamType errorLevel="info" />
        <MoreSpecificReturnType errorLevel="info" />

        <!-- Too context-dependent. Eg. of course some HTTP-context sensitive classes will return null in CLI. But in most cases we work in HTTP context, so we can safely assume it's not null -->
        <PossiblyNullPropertyFetch errorLevel="suppress" />
        <PossiblyNullReference errorLevel="suppress" />
        <PossiblyInvalidArgument errorLevel="suppress" />
        <PossiblyNullArgument errorLevel="suppress" />

        <PropertyNotSetInConstructor errorLevel="suppress" /> <!-- Prevents injection via setters -->
        <MissingClosureReturnType errorLevel="suppress" /> <!-- Closures are generally small enough to not be a problem. Psalm is good in inferring return types there and doing this every time would be annoying -->
        <MissingConstructor errorLevel="suppress" /> <!-- Why am I forced to specify useless constructor in each class? -->
        <UnresolvableInclude errorLevel="suppress" /> <!-- So? If you can't resolve it because it's dynamic, don't scream -->
        <PossiblyNullOperand errorLevel="suppress" /> <!-- This prevents concatenating string|null - I'm not going to explicitly convert null to empty string each time. -->
        <ImplicitToStringCast errorLevel="suppress" /> <!-- Come on, this is 90% of reason why using __toString() -->

        <!--
        Annoying, but occurence is not so high that it's not viable to fix these on case-by-case basis via annotation:
                InvalidArrayOffset: Use @psalm-var class-string. Also see https://github.com/vimeo/psalm/issues/584
                TypeCoercion: Just @var that shit for rare Container::get() calls
        -->
    </issueHandlers>
</psalm>
